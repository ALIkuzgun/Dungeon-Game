import pygame
wall_map = [
    [1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1,1 ,1 ,1 ,1],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,3],
    [2 ,8 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,3],
    [2 ,8 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,6 ,6 ,0 ,6 ,6 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,3],
    [2 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,5 ,0 ,0 ,0 ,5 ,0 ,0 ,0 ,5 ,0 ,0 ,0 ,5 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,9 ,0 ,0 ,0 ,0 ,9 ,0 ,0 ,0 ,0 ,9 ,0 ,0 ,0 ,0 ,9 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,1 ,2 ,0 ,3 ,1 ,2 ,0 ,3 ,1 ,2 ,0 ,3 ,1 ,2 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,4 ,1 ,1 ,1 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,4 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,6 ,6 ,0 ,6 ,6 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,9 ,0 ,0 ,0 ,0 ,9 ,0 ,0 ,0 ,0 ,9 ,0 ,0 ,0 ,0 ,9 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,4 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,1 ,1 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,9 ,0 ,0 ,0 ,0 ,9 ,0 ,0 ,0 ,0 ,9 ,0 ,0 ,0 ,0 ,9 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,1 ,1 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,4 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,9 ,0 ,0 ,0 ,0 ,9 ,0 ,0 ,0 ,0 ,9 ,0 ,0 ,0 ,0 ,9 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,5 ,0 ,0 ,0 ,5 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,5 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,5 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,6 ,6 ,6 ,0 ,0 ,0 ,0 ,3 ,1 ,2 ,0 ,0 ,0 ,0 ,6 ,6 ,6 ,0 ,0 ,0 ,0 ,3 ,1 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,0 ,0 ,0 ,0 ,5 ,0 ,0 ,0 ,5 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,"0" ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,8 ,8 ,8 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,8 ,8 ,8 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,5 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,5 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,8 ,8 ,8 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,6 ,6 ,6 ,0 ,0 ,0 ,0 ,3 ,1 ,2 ,0 ,0 ,0 ,0 ,6 ,6 ,6 ,0 ,0 ,0 ,0 ,3 ,1 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,8 ,8 ,8 ,8 ,8 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,8 ,8 ,8 ,8 ,8 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,8 ,8 ,8 ,8 ,8 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,8 ,8 ,8 ,8 ,8 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,0 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,0 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,0 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,0 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,8 ,8 ,8 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,8 ,8 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,8 ,8 ,8 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,8 ,8 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,8 ,8 ,8 ,8 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,8 ,8 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,8 ,8 ,8 ,8 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,8 ,8 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,8 ,8 ,8 ,8 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,8 ,8 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,8 ,8 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,8 ,8 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,8 ,6 ,0 ,0 ,0 ,6 ,8 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,8 ,8 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,8 ,8 ,8 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,8 ,8 ,8 ,8 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,8 ,6 ,0 ,0 ,0 ,6 ,8 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,8 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,7 ,0 ,0 ,0 ,7 ,0 ,0 ,0 ,7 ,0 ,0 ,0 ,7 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,1 ,1 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,7 ,0 ,0 ,0 ,7 ,0 ,0 ,0 ,7 ,0 ,0 ,0 ,7 ,0 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,1 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,1 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,1 ,1 ,1 ,1 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,7 ,0 ,0 ,0 ,7 ,0 ,0 ,0 ,7 ,0 ,0 ,0 ,7 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,1 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,7 ,0 ,0 ,0 ,7 ,0 ,0 ,0 ,7 ,0 ,0 ,0 ,7 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3],
    [1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1,1 ,1 ,1 ,1]]

class Key():
    def __init__(self, x, y):        
        self.image = pygame.image.load('img/key.png')
        self.rect = pygame.Rect(x, y, 48, 48)

    def draw(self):
        ekran.blit(self.image,self.rect)

class Door():
    def __init__(self, x, y):        
        self.image = pygame.image.load('img/door.png')
        self.rect = pygame.Rect(x, y, 48, 48)

    def draw(self):
        ekran.blit(self.image,self.rect)

class Map():
    def __init__(self, x, y):        
        self.image = pygame.image.load('img/map_game_jam.png')
        self.rect = pygame.Rect(x, y, 2240, 2240)

    def draw(self):
        ekran.blit(self.image,self.rect)

class GoldHeart():
    def __init__(self, x, y):        
        self.image = pygame.image.load('img/heart.png')
        self.rect = pygame.Rect(x, y, 48, 72)

    def draw(self):
        ekran.blit(self.image,self.rect)

class Wall():
    def __init__(self, x, y, en, boy):        
        self.x = x      
        self.y = y
        self.en = en
        self.boy = boy
        self.rect = pygame.Rect(x, y, self.en, self.boy)

    def draw(self):
        pygame.draw.rect(ekran,(244,122,122),self.rect)

class Water():
    def __init__(self, x, y, en, boy):        
        self.x = x      
        self.y = y
        self.en = en
        self.boy = boy
        self.rect = pygame.Rect(x, y, self.en, self.boy)

    def draw(self):
        pygame.draw.rect(ekran,(11,122,122),self.rect)

class Trol():
    def __init__(self,x,y,en,boy,speed):  
        self.images = {
            'idle': pygame.image.load('enemy/trol/TrolIdle.png'),
            'walk': pygame.image.load('enemy/trol/TrolWalk.png'),
            'attack': pygame.image.load('enemy/trol/TrolAttack.png'),
            'die': pygame.image.load('enemy/trol/TrolDie.png')
        }
        self.endimage = self.images["idle"].subsurface(pygame.Rect(55, 50, 45, 45)) 
        self.x, self.y = x, y
        self.en, self.boy = en, boy
        self.rect = pygame.Rect(self.x, self.y, self.en, self.boy)
        self.speed = speed
        self.move_direction_rl, self.move_direction_du, self.move_status = "right", "down", 0
        self.attack = 0
        self.attack_animation_time = 0
        self.animation_time = 0
        self.die_animation_time = 0
        self.health = 100
        self.animation_frame = 0
        self.attack_animation_frame = 0
        self.wallhit = 0
        self.attack_rect = pygame.Rect(10000, 1000, 30, 30) 
        self.right_down_imgs = [(55, 55, 45, 40),(215, 50, 45, 45),(375, 45, 45, 50),(535, 55, 45, 40),(695, 50, 45, 45),(855, 45, 45, 50)]
        self.left_down_imgs = [(55, 215, 50, 40),(215, 210, 50, 45),(375, 205, 50, 50),(535, 215, 50, 40),(695, 210, 50, 45),(855, 205, 50, 50)]
        self.right_up_imgs = [(55, 375, 50, 40),(215, 370, 50, 45),(375, 365, 50, 50),(535, 375, 50, 40),(695, 370, 50, 45),(855, 365, 50, 50)]
        self.left_up_imgs = [(55, 535, 50, 40),(215, 530, 50, 45),(375, 525, 50, 50),(535, 535, 50, 40),(695, 530, 50, 45),(855, 525, 50, 50)]
    #    self.die_imgs = [(55, 55, 45, 45),(225, 50, 50, 45),(380, 45, 50, 50),(535, 55, 50, 45),(690, 50, 50, 45),(855, 45, 60, 45),(1010, 55, 80, 35),(1165, 50, 90, 40),(1320, 45, 100, 45),(1505, 55, 50, 30),(1670, 50, 45, 25),(1835, 45, 40, 20),(2010, 55, 20, 15),(2175, 50, 10, 10)]
        
    def player_attack_hit(self):
        if self.rect.colliderect(attack.rect):
            if player.died == 0:
              self.health-=1.7
            if player.died == 1:
              self.health-=2
            if player.died == 2:
              self.health-=2.5
            if player.died == 3:
              self.health-=2.2
        for trol in trols:
          if trol.health <= 0:
               trols.remove(trol)

    def move(self):    
      moving_horizontally = False
      moving_vertically = False
      original_position = self.rect.topleft

      if abs(player.rect.x - self.rect.x) <= 50 and abs(player.rect.y - self.rect.y) <= 50 :
        self.attack = 1
      else:
        self.attack = 0

      distance_threshold = 250 
      if self.wallhit == 0:
        if abs(player.rect.x - self.rect.x) <= distance_threshold and abs(player.rect.y - self.rect.y) <= distance_threshold:
          if player.rect.x > self.rect.x:
              self.rect.x += self.speed
              self.move_direction_rl = "right"
              moving_horizontally = True
          if player.rect.x < self.rect.x:
              self.rect.x -= self.speed
              self.move_direction_rl = "left"
              moving_horizontally = True

          if player.rect.y > self.rect.y:
              self.rect.y += self.speed
              self.move_direction_du = "down"
              moving_vertically = True
          if player.rect.y < self.rect.y:
              self.rect.y -= self.speed
              self.move_direction_du = "up"
              moving_vertically = True

      for wall in walls:
          if self.rect.colliderect(wall.rect):
              self.rect.topleft = original_position
              moving_horizontally = False
              moving_vertically = False
              break

      if moving_horizontally or moving_vertically:
            self.move_status = 1
      else:
            self.move_status = 0

      if self.move_status == 1:
              self.animation_time += 1
              if self.move_direction_rl == "right" and self.move_direction_du == "down":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.right_down_imgs)
                        frame_rect = pygame.Rect(self.right_down_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.left_down_imgs)
                        frame_rect = pygame.Rect(self.left_down_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0

              elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.right_up_imgs)
                        frame_rect = pygame.Rect(self.right_up_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.left_up_imgs)
                        frame_rect = pygame.Rect(self.left_up_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0
      else:  
            if self.move_direction_rl == "right" and self.move_direction_du == "down" or player.rect.x > self.rect.x and player.rect.y > self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(55, 50, 45, 45)) 
            elif self.move_direction_rl == "left" and self.move_direction_du == "down" or player.rect.x < self.rect.x and player.rect.y > self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(60, 210, 45, 45)) 
            elif self.move_direction_rl == "right" and self.move_direction_du == "up" or player.rect.x > self.rect.x and player.rect.y < self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(55, 370, 45, 45)) 
            elif self.move_direction_rl == "left" and self.move_direction_du == "up" or player.rect.x < self.rect.x and player.rect.y < self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(60, 530, 45, 45)) 

      if self.attack == 1:    
              self.attack_animation_time += 1
              if self.move_direction_rl == "right" and self.move_direction_du == "down":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(45, 50, 55, 50))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(215, 50, 75, 50))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+50,self.rect.y+10
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(375, 50, 80, 65))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+45,self.rect.y+40
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(535, 50, 50, 65))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+15,self.rect.y+40
                    if self.attack_animation_time >= 60:
                          self.attack_animation_time = 0
                          self.attack = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(60, 205, 55, 50))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(190, 205, 75, 50))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x,self.rect.y+10
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(345, 205, 80, 65))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+30,self.rect.y+40
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(535, 205, 50, 65))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+15,self.rect.y+45
                    if self.attack_animation_time >= 60:
                          self.attack_animation_time = 0
                          self.attack = 0
              elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(45, 365, 55, 50))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(215, 365, 75, 50))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+50,self.rect.y+20
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(375, 355, 80, 65))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+40,self.rect.y+10
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(535, 355, 50, 65))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+20,self.rect.y
                    if self.attack_animation_time >= 60:
                          self.attack_animation_time = 0
                          self.attack = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(60, 525, 55, 50))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(190, 525, 75, 50))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x,self.rect.y+20
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(345, 515, 80, 65))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+30,self.rect.y+10
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(535, 515, 50, 65))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+20,self.rect.y
                    if self.attack_animation_time >= 60:
                          self.attack_animation_time = 0
                          self.attack = 0
      else:
        self.attack_rect.x,self.attack_rect.y = 1000,10000

    def draw_health_bar(self):
      pygame.draw.rect(ekran,(0,0,0),(self.rect.x-25,self.rect.y-17,104,14))
      pygame.draw.rect(ekran,(255,0,0),(self.rect.x-23,self.rect.y-15,100,10))
      pygame.draw.rect(ekran,(0,255,0),(self.rect.x-23,self.rect.y-15,self.health,10))

    def draw(self):
        ekran.blit(self.endimage,self.rect)

    def update(self):
        self.draw()
        self.draw_health_bar()
        self.move()
        self.player_attack_hit()

class Orc():
    def __init__(self,x,y,en,boy,speed):  
        self.images = {
            'idle': pygame.image.load('enemy/orc/OrcIdle.png'),
            'walk': pygame.image.load('enemy/orc/OrcWalk.png'),
            'attack': pygame.image.load('enemy/orc/OrcAttack.png')
        }
        self.endimage = self.images["idle"].subsurface(pygame.Rect(60, 50, 35, 45)) 
        self.x, self.y = x, y
        self.en, self.boy = en, boy
        self.rect = pygame.Rect(self.x, self.y, self.en, self.boy)
        self.speed = speed
        self.move_direction_rl, self.move_direction_du, self.move_status = "right", "down", 0
        self.attack = 0
        self.attack_animation_time = 0
        self.animation_time = 0
        self.health = 80
        self.animation_frame = 0
        self.attack_animation_frame = 0
        self.attack_rect = pygame.Rect(10000, 1000, 30, 30) 
        self.right_down_imgs = [(60, 50, 35, 45),(220, 45, 35, 50),(380, 50, 35, 45),(540, 45, 35, 50)]
        self.left_down_imgs = [(65, 210, 35, 45),(225, 205, 35, 50),(385, 210, 35, 45),(545, 205, 35, 50)]
        self.right_up_imgs = [(60, 370, 35, 45),(220, 365, 35, 50),(380, 370, 35, 45),(540, 365, 35, 50)]
        self.left_up_imgs = [(65, 530, 35, 45),(225, 525, 35, 50),(385, 530, 35, 45),(545, 525, 35, 50)]
        
    def player_attack_hit(self):
        if self.rect.colliderect(attack.rect):
            if player.died == 0:
              self.health-=1.7
            if player.died == 1:
              self.health-=2
            if player.died == 2:
              self.health-=2.5
            if player.died == 3:
              self.health-=2.2
        for orc in orcs:
           if orc.health <= 0:
               orcs.remove(orc)

    def move(self):
      moving_horizontally = False
      moving_vertically = False
      original_position = self.rect.topleft

      if abs(player.rect.x - self.rect.x) <= 50 and abs(player.rect.y - self.rect.y) <= 50 :
        self.attack = 1
      else:
        self.attack = 0

      distance_threshold = 250 
      if abs(player.rect.x - self.rect.x) <= distance_threshold and abs(player.rect.y - self.rect.y) <= distance_threshold:
          if player.rect.x > self.rect.x:
              self.rect.x += 2
              self.move_direction_rl = "right"
              moving_horizontally = True
          if player.rect.x < self.rect.x:
              self.rect.x -= 2
              self.move_direction_rl = "left"
              moving_horizontally = True

          if player.rect.y > self.rect.y:
              self.rect.y += 2
              self.move_direction_du = "down"
              moving_vertically = True
          if player.rect.y < self.rect.y:
              self.rect.y -= 2
              self.move_direction_du = "up"
              moving_vertically = True

      for wall in walls:
          if self.rect.colliderect(wall.rect):
              self.rect.topleft = original_position
              moving_horizontally = False
              moving_vertically = False
              break

      if moving_horizontally or moving_vertically:
            self.move_status = 1
      else:
            self.move_status = 0

      if self.move_status == 1:
              self.animation_time += 1
              if self.move_direction_rl == "right" and self.move_direction_du == "down":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.right_down_imgs)
                        frame_rect = pygame.Rect(self.right_down_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.left_down_imgs)
                        frame_rect = pygame.Rect(self.left_down_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0

              elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.right_up_imgs)
                        frame_rect = pygame.Rect(self.right_up_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.left_up_imgs)
                        frame_rect = pygame.Rect(self.left_up_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0
      else:  
            if self.move_direction_rl == "right" and self.move_direction_du == "down" or player.rect.x > self.rect.x and player.rect.y > self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(60, 50, 35, 45)) 
            elif self.move_direction_rl == "left" and self.move_direction_du == "down" or player.rect.x < self.rect.x and player.rect.y > self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(65, 210, 35, 45)) 
            elif self.move_direction_rl == "right" and self.move_direction_du == "up" or player.rect.x > self.rect.x and player.rect.y < self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(60, 370, 35, 45)) 
            elif self.move_direction_rl == "left" and self.move_direction_du == "up" or player.rect.x < self.rect.x and player.rect.y < self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(65, 530, 35, 45)) 

      if self.attack == 1:    
              self.attack_animation_time += 1
              if self.move_direction_rl == "right" and self.move_direction_du == "down":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(60, 50, 40, 45))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(230, 50, 60, 45))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+50,self.rect.y+10
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(390, 50, 60, 60))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+45,self.rect.y+40
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(550, 50, 40, 60))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+15,self.rect.y+40
                    if self.attack_animation_time >= 60:
                          self.attack_animation_time = 0
                          self.attack = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(60, 210, 40, 45))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(190, 210, 60, 45))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x,self.rect.y+10
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(350, 210, 60, 60))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+30,self.rect.y+40
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(530, 210, 40, 60))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+15,self.rect.y+45
                    if self.attack_animation_time >= 60:
                          self.attack_animation_time = 0
                          self.attack = 0
              elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(60, 370, 40, 45))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(230, 370, 60, 45))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+50,self.rect.y+20
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(390, 370, 60, 45))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+40,self.rect.y+10
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(550, 370, 40, 45))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+20,self.rect.y
                    if self.attack_animation_time >= 60:
                          self.attack_animation_time = 0
                          self.attack = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(60, 530, 40, 45))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(190, 530, 60, 45))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x,self.rect.y+20
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(350, 530, 60, 45))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+30,self.rect.y+10
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(530, 530, 40, 45))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+20,self.rect.y
                    if self.attack_animation_time >= 60:
                          self.attack_animation_time = 0
                          self.attack = 0
      else:
        self.attack_rect.x,self.attack_rect.y = 10000,1000

    def draw_health_bar(self):
      pygame.draw.rect(ekran,(0,0,0),(self.rect.x-15,self.rect.y-17,84,14))
      pygame.draw.rect(ekran,(255,0,0),(self.rect.x-13,self.rect.y-15,80,10))
      pygame.draw.rect(ekran,(0,255,0),(self.rect.x-13,self.rect.y-15,self.health,10))

    def draw(self):
        ekran.blit(self.endimage,self.rect)

    def update(self):
        self.draw()
        self.draw_health_bar()
        self.move()
        self.player_attack_hit()

class Minotaur():
    def __init__(self,x,y,en,boy,speed):  
        self.images = {
            'idle': pygame.image.load('enemy/minotaur/MinotaurIdle.png'),
            'walk': pygame.image.load('enemy/minotaur/MinotaurWalk.png'),
            'attack': pygame.image.load('enemy/minotaur/MinotaurAttack.png')
        }
        self.endimage = self.images["idle"].subsurface(pygame.Rect(50, 40, 55, 55)) 
        self.x, self.y = x, y
        self.en, self.boy = en, boy
        self.rect = pygame.Rect(self.x, self.y, self.en, self.boy)
        self.speed = speed
        self.move_direction_rl, self.move_direction_du, self.move_status = "right", "down", 0
        self.attack = 0
        self.attack_animation_time = 0
        self.animation_time = 0
        self.health = 120
        self.animation_frame = 0
        self.attack_animation_frame = 0
        self.attack_rect = pygame.Rect(10000, 1000, 100, 80)
        self.right_down_imgs = [(50, 45, 60, 50),(215, 40, 60, 55),(375, 35, 60, 60),(535, 45, 60, 50),(695, 40, 60, 55),(855, 35, 60, 60)]
        self.left_down_imgs = [(55, 205, 60, 50),(215, 200, 60, 55),(375, 195, 60, 60),(530, 205, 60, 50),(695, 200, 60, 55),(855, 195, 60, 60)]
        self.right_up_imgs = [(50, 365, 60, 50),(215, 360, 60, 55),(375, 355, 60, 60),(535, 365, 60, 50),(695, 360, 60, 55),(855, 355, 60, 60)]
        self.left_up_imgs = [(55, 525, 60, 50),(215, 520, 60, 55),(375, 515, 60, 60),(530, 525, 60, 50),(695, 520, 60, 55),(855, 515, 60, 60)]
        
    def player_attack_hit(self):
        if self.rect.colliderect(attack.rect):
            if player.died == 0:
              self.health-=1.7
            if player.died == 1:
              self.health-=2
            if player.died == 2:
              self.health-=2.5
            if player.died == 3:
              self.health-=2.2
        for minotaur in minotaurs:
           if minotaur.health <= 0:
               minotaurs.remove(minotaur)

    def move(self):
      moving_horizontally = False
      moving_vertically = False
      original_position = self.rect.topleft

      if abs(player.rect.x - self.rect.x) <= 50 and abs(player.rect.y - self.rect.y) <= 50 :
        self.attack = 1
      else:
        self.attack = 0

      distance_threshold = 250 
      if abs(player.rect.x - self.rect.x) <= distance_threshold and abs(player.rect.y - self.rect.y) <= distance_threshold:
          if player.rect.x > self.rect.x:
              self.rect.x += 2
              self.move_direction_rl = "right"
              moving_horizontally = True
          if player.rect.x < self.rect.x:
              self.rect.x -= 2
              self.move_direction_rl = "left"
              moving_horizontally = True

          if player.rect.y > self.rect.y:
              self.rect.y += 2
              self.move_direction_du = "down"
              moving_vertically = True
          if player.rect.y < self.rect.y:
              self.rect.y -= 2
              self.move_direction_du = "up"
              moving_vertically = True

      for wall in walls:
          if self.rect.colliderect(wall.rect):
              self.rect.topleft = original_position
              moving_horizontally = False
              moving_vertically = False
              break

      if moving_horizontally or moving_vertically:
          self.move_status = 1
      else:
          self.move_status = 0

      if self.move_status == 1:
              self.animation_time += 1
              if self.move_direction_rl == "right" and self.move_direction_du == "down":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.right_down_imgs)
                        frame_rect = pygame.Rect(self.right_down_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.left_down_imgs)
                        frame_rect = pygame.Rect(self.left_down_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0

              elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.right_up_imgs)
                        frame_rect = pygame.Rect(self.right_up_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.left_up_imgs)
                        frame_rect = pygame.Rect(self.left_up_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0
      else:  
            if self.move_direction_rl == "right" and self.move_direction_du == "down" or player.rect.x > self.rect.x and player.rect.y > self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(50, 40, 55, 55)) 
            elif self.move_direction_rl == "left" and self.move_direction_du == "down" or player.rect.x < self.rect.x and player.rect.y > self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(55, 200, 55, 55)) 
            elif self.move_direction_rl == "right" and self.move_direction_du == "up" or player.rect.x > self.rect.x and player.rect.y < self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(50, 360, 55, 55)) 
            elif self.move_direction_rl == "left" and self.move_direction_du == "up" or player.rect.x < self.rect.x and player.rect.y < self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(55, 520, 55, 55)) 

      if self.attack == 1:    
              self.attack_animation_time += 1
              if self.move_direction_rl == "right" and self.move_direction_du == "down":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(50, 45, 55, 50))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(210, 10, 65, 60))
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(370, 20, 65, 70))
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(510, 45, 95, 65))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x,self.rect.y
                    if self.attack_animation_time >= 64:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(665, 50, 105, 70))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x,self.rect.y
                    if self.attack_animation_time >= 80:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(820, 45, 115, 80))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x,self.rect.y
                    if self.attack_animation_time >= 96:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(975, 35, 125, 85))
                    if self.attack_animation_time >= 112:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(1130, 25, 135, 90))
                    if self.attack_animation_time >= 128:
                          self.attack_animation_time = 0
                          self.attack = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(55, 205, 55, 50))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(215, 170, 65, 60))
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(375, 180, 65, 70))
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(515, 205, 95, 65))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x,self.rect.y
                    if self.attack_animation_time >= 64:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(670, 210, 105, 70))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x,self.rect.y
                    if self.attack_animation_time >= 80:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(825, 205, 115, 80))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x,self.rect.y
                    if self.attack_animation_time >= 96:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(980, 195, 125, 85))
                    if self.attack_animation_time >= 112:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(1130, 185, 135, 90))
                    if self.attack_animation_time >= 128:
                          self.attack_animation_time = 0
                          self.attack = 0
              elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(50, 365, 55, 50))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(210, 330, 65, 60))
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(370, 340, 65, 70))
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(510, 365, 95, 65))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x,self.rect.y
                    if self.attack_animation_time >= 64:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(665, 370, 105, 70))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x,self.rect.y
                    if self.attack_animation_time >= 80:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(820, 365, 115, 80))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x,self.rect.y
                    if self.attack_animation_time >= 96:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(975, 355, 125, 85))
                    if self.attack_animation_time >= 112:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(1130, 345, 135, 90))
                    if self.attack_animation_time >= 128:
                          self.attack_animation_time = 0
                          self.attack = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(55, 525, 55, 50))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(215, 490, 65, 60))
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(375, 500, 65, 70))
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(515, 525, 95, 65))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x,self.rect.y
                    if self.attack_animation_time >= 64:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(670, 530, 105, 70))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x,self.rect.y
                    if self.attack_animation_time >= 80:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(825, 525, 115, 80))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x,self.rect.y
                    if self.attack_animation_time >= 96:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(980, 515, 125, 85))
                    if self.attack_animation_time >= 112:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(1130, 505, 135, 90))
                    if self.attack_animation_time >= 128:
                          self.attack_animation_time = 0
                          self.attack = 0
      else:
        self.attack_rect.x,self.attack_rect.y = 1000,10000

    def draw_health_bar(self):
      pygame.draw.rect(ekran,(0,0,0),(self.rect.x-45,self.rect.y-17,124,14))
      pygame.draw.rect(ekran,(255,0,0),(self.rect.x-43,self.rect.y-15,120,10))
      pygame.draw.rect(ekran,(0,255,0),(self.rect.x-43,self.rect.y-15,self.health,10))

    def draw(self):
        ekran.blit(self.endimage,self.rect)

    def update(self):
        self.draw()
        self.draw_health_bar()
        self.move()
        self.player_attack_hit()

class Trasgo():
    def __init__(self,x,y,en,boy,speed):  
        self.images = {
            'idle': pygame.image.load('enemy/trasgo/TrasgoIdle.png'),
            'walk': pygame.image.load('enemy/trasgo/TrasgoWalk.png'),
            'attack': pygame.image.load('enemy/trasgo/TrasgoAttack.png')
        }
        self.endimage = self.images["idle"].subsurface(pygame.Rect(55, 65, 45, 30)) 
        self.x, self.y = x, y
        self.en, self.boy = en, boy
        self.rect = pygame.Rect(self.x, self.y, self.en, self.boy)
        self.speed = speed
        self.move_direction_rl, self.move_direction_du, self.move_status = "right", "down", 0
        self.attack = 0
        self.attack_animation_time = 0
        self.animation_time = 0
        self.health = 80
        self.animation_frame = 0
        self.attack_animation_frame = 0
        self.attack_rect = pygame.Rect(10000, 1000, 30, 30)
        self.right_down_imgs = [(55, 65, 45, 30),(215, 60, 40, 35),(375, 65, 45, 30),(535, 60, 40, 35)]
        self.left_down_imgs = [(60, 225, 45, 30),(225, 220, 40, 35),(380, 225, 45, 30),(545, 220, 40, 35)]
        self.right_up_imgs = [(55, 385, 45, 30),(215, 380, 40, 35),(375, 385, 45, 30),(535, 380, 40, 35)]
        self.left_up_imgs = [(60, 545, 45, 30),(225, 540, 40, 35),(380, 545, 45, 30),(544, 540, 40, 35)]
        
    def player_attack_hit(self):
        if self.rect.colliderect(attack.rect):
            if player.died == 0:
              self.health-=1.7
            if player.died == 1:
              self.health-=2
            if player.died == 2:
              self.health-=2.5
            if player.died == 3:
              self.health-=2.2
        for trasgo in trasgos:
           if trasgo.health <= 0:
               trasgos.remove(trasgo)

    def move(self):
      moving_horizontally = False
      moving_vertically = False
      original_position = self.rect.topleft

      if abs(player.rect.x - self.rect.x) <= 50 and abs(player.rect.y - self.rect.y) <= 50 :
        self.attack = 1
      else:
        self.attack = 0

      distance_threshold = 250 
      if abs(player.rect.x - self.rect.x) <= distance_threshold and abs(player.rect.y - self.rect.y) <= distance_threshold:
          if player.rect.x > self.rect.x:
              self.rect.x += 2
              self.move_direction_rl = "right"
              moving_horizontally = True
          if player.rect.x < self.rect.x:
              self.rect.x -= 2
              self.move_direction_rl = "left"
              moving_horizontally = True

          if player.rect.y > self.rect.y:
              self.rect.y += 2
              self.move_direction_du = "down"
              moving_vertically = True
          if player.rect.y < self.rect.y:
              self.rect.y -= 2
              self.move_direction_du = "up"
              moving_vertically = True

      for wall in walls:
          if self.rect.colliderect(wall.rect):
              self.rect.topleft = original_position
              moving_horizontally = False
              moving_vertically = False
              break

      if moving_horizontally or moving_vertically:
            self.move_status = 1
      else:
            self.move_status = 0

      if self.move_status == 1:
              self.animation_time += 1
              if self.move_direction_rl == "right" and self.move_direction_du == "down":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.right_down_imgs)
                        frame_rect = pygame.Rect(self.right_down_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.left_down_imgs)
                        frame_rect = pygame.Rect(self.left_down_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0

              elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.right_up_imgs)
                        frame_rect = pygame.Rect(self.right_up_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.left_up_imgs)
                        frame_rect = pygame.Rect(self.left_up_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0
      else:  
            if self.move_direction_rl == "right" and self.move_direction_du == "down" or player.rect.x > self.rect.x and player.rect.y > self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(55, 65, 45, 30)) 
            elif self.move_direction_rl == "left" and self.move_direction_du == "down" or player.rect.x < self.rect.x and player.rect.y > self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(60, 225, 45, 30)) 
            elif self.move_direction_rl == "right" and self.move_direction_du == "up" or player.rect.x > self.rect.x and player.rect.y < self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(55, 385, 45, 30)) 
            elif self.move_direction_rl == "left" and self.move_direction_du == "up" or player.rect.x < self.rect.x and player.rect.y < self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(60, 545, 45, 30)) 

      if self.attack == 1:    
              self.attack_animation_time += 1
              if self.move_direction_rl == "right" and self.move_direction_du == "down":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(55, 65, 45, 30))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(215, 65, 45, 30))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+30,self.rect.y+10
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(385, 65, 65, 30))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+25,self.rect.y+40
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(550, 65, 65, 50))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+5,self.rect.y+40
                    if self.attack_animation_time >= 60:
                          self.attack_animation_time = 0
                          self.attack = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(60, 225, 45, 30))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(220, 225, 45, 30))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x,self.rect.y+10
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(350, 225, 65, 30))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+30,self.rect.y+40
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(505, 225, 65, 50))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+15,self.rect.y+45
                    if self.attack_animation_time >= 60:
                          self.attack_animation_time = 0
                          self.attack = 0
              elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(55, 385, 45, 30))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(215, 385, 45, 30))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+50,self.rect.y+20
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(385, 385, 65, 35))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+40,self.rect.y+10
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(550, 385, 65, 35))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+20,self.rect.y
                    if self.attack_animation_time >= 60:
                          self.attack_animation_time = 0
                          self.attack = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(60, 545, 45, 30))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(220, 545, 45, 30))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x,self.rect.y+20
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(350, 545, 65, 35))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+30,self.rect.y+10
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(505, 545, 65, 35))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+20,self.rect.y
                    if self.attack_animation_time >= 60:
                          self.attack_animation_time = 0
                          self.attack = 0
      else:
        self.attack_rect.x,self.attack_rect.y = 10000,10000

    def draw_health_bar(self):
      pygame.draw.rect(ekran,(0,0,0),(self.rect.x-15,self.rect.y-17,84,14))
      pygame.draw.rect(ekran,(255,0,0),(self.rect.x-13,self.rect.y-15,80,10))
      pygame.draw.rect(ekran,(0,255,0),(self.rect.x-13,self.rect.y-15,self.health,10))

    def draw(self):
        ekran.blit(self.endimage,self.rect)

    def update(self):
        self.draw()
        self.draw_health_bar()
        self.move()
        self.player_attack_hit()

class Goblin():
    def __init__(self,x,y,en,boy,speed):  
        self.images = {
            'idle': pygame.image.load('enemy/goblin/GoblinIdle.png'),
            'walk': pygame.image.load('enemy/goblin/GoblinWalk.png'),
            'attack': pygame.image.load('enemy/goblin/GoblinAttack.png')
        }
        self.endimage = self.images["idle"].subsurface(pygame.Rect(60, 65, 35, 30)) 
        self.x, self.y = x, y
        self.en, self.boy = en, boy
        self.rect = pygame.Rect(self.x, self.y, self.en, self.boy)
        self.speed = speed
        self.move_direction_rl, self.move_direction_du, self.move_status = "right", "down", 0
        self.attack = 0
        self.attack_animation_time = 0
        self.animation_time = 0
        self.health = 50
        self.animation_frame = 0
        self.attack_animation_frame = 0
        self.attack_rect = pygame.Rect(10000, 1000, 30, 30)
        self.right_down_imgs = [(60, 65, 35, 30),(220, 60, 35, 35),(380, 65, 35, 30),(540, 60, 35, 35)]
        self.left_down_imgs = [(65, 225, 35, 30),(225, 220, 35, 35),(385, 225, 35, 30),(545, 220, 35, 35)]
        self.right_up_imgs = [(60, 385, 35, 30),(220, 380, 35, 35),(380, 385, 35, 30),(540, 380, 35, 35)]
        self.left_up_imgs = [(60, 545, 35, 30),(220, 540, 35, 35),(380, 545, 35, 30),(545, 540, 35, 35)]
        
    def player_attack_hit(self):
        if player.attack == 1:
          if self.rect.colliderect(attack.rect):
            if player.died == 0:
              self.health-=1.7
            if player.died == 1:
              self.health-=2
            if player.died == 2:
              self.health-=2.5
            if player.died == 3:
              self.health-=2.2
        for goblin in goblins:
           if goblin.health <= 0:
               goblins.remove(goblin)

    def move(self):
      moving_horizontally = False
      moving_vertically = False
      original_position = self.rect.topleft

      if abs(player.rect.x - self.rect.x) <= 50 and abs(player.rect.y - self.rect.y) <= 50 :
        self.attack = 1
      else:
        self.attack = 0

      distance_threshold = 250 
      if abs(player.rect.x - self.rect.x) <= distance_threshold and abs(player.rect.y - self.rect.y) <= distance_threshold:
          if player.rect.x > self.rect.x:
              self.rect.x += 2
              self.move_direction_rl = "right"
              moving_horizontally = True
          if player.rect.x < self.rect.x:
              self.rect.x -= 2
              self.move_direction_rl = "left"
              moving_horizontally = True

          if player.rect.y > self.rect.y:
              self.rect.y += 2
              self.move_direction_du = "down"
              moving_vertically = True
          if player.rect.y < self.rect.y:
              self.rect.y -= 2
              self.move_direction_du = "up"
              moving_vertically = True

      for wall in walls:
          if self.rect.colliderect(wall.rect):
              self.rect.topleft = original_position
              moving_horizontally = False
              moving_vertically = False
              break

      if moving_horizontally or moving_vertically:
            self.move_status = 1
      else:
            self.move_status = 0

      if self.move_status == 1:
              self.animation_time += 1
              if self.move_direction_rl == "right" and self.move_direction_du == "down":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.right_down_imgs)
                        frame_rect = pygame.Rect(self.right_down_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.left_down_imgs)
                        frame_rect = pygame.Rect(self.left_down_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0

              elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.right_up_imgs)
                        frame_rect = pygame.Rect(self.right_up_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.left_up_imgs)
                        frame_rect = pygame.Rect(self.left_up_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0
      else:  
            if self.move_direction_rl == "right" and self.move_direction_du == "down" or player.rect.x > self.rect.x and player.rect.y > self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(60, 65, 35, 30)) 
            elif self.move_direction_rl == "left" and self.move_direction_du == "down" or player.rect.x < self.rect.x and player.rect.y > self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(65, 225, 35, 30)) 
            elif self.move_direction_rl == "right" and self.move_direction_du == "up" or player.rect.x > self.rect.x and player.rect.y < self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(60, 385, 35, 30)) 
            elif self.move_direction_rl == "left" and self.move_direction_du == "up" or player.rect.x < self.rect.x and player.rect.y < self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(65, 545, 35, 30)) 

      if self.attack == 1:    
              self.attack_animation_time += 1
              if self.move_direction_rl == "right" and self.move_direction_du == "down":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(60, 65, 40, 30))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(230, 65, 60, 30))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+30,self.rect.y+10
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(395, 65, 55, 50))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+25,self.rect.y+40
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(555, 65, 35, 50))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+5,self.rect.y+40
                    if self.attack_animation_time >= 60:
                          self.attack_animation_time = 0
                          self.attack = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(60, 225, 40, 30))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(190, 225, 60, 30))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x,self.rect.y+10
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(350, 225, 55, 30))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+30,self.rect.y+40
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(530, 225, 35, 50))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+15,self.rect.y+45
                    if self.attack_animation_time >= 60:
                          self.attack_animation_time = 0
                          self.attack = 0
              elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(60, 385, 40, 30))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(230, 385, 60, 35))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+50,self.rect.y+20
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(395, 380, 55, 35))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+40,self.rect.y+10
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(555, 380, 35, 35))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+20,self.rect.y
                    if self.attack_animation_time >= 60:
                          self.attack_animation_time = 0
                          self.attack = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(60, 545, 45, 30))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(190, 545, 65, 30))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x,self.rect.y+20
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(350, 540, 60, 35))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+30,self.rect.y+10
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(530, 540, 40, 35))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+20,self.rect.y
                    if self.attack_animation_time >= 60:
                          self.attack_animation_time = 0
                          self.attack = 0
      else:
        self.attack_rect.x,self.attack_rect.y = 10000,10000

    def draw_health_bar(self):
      pygame.draw.rect(ekran,(0,0,0),(self.rect.x-6,self.rect.y-17,54,14))
      pygame.draw.rect(ekran,(255,0,0),(self.rect.x-4,self.rect.y-15,50,10))
      pygame.draw.rect(ekran,(0,255,0),(self.rect.x-4,self.rect.y-15,self.health,10))

    def draw(self):
        ekran.blit(self.endimage,self.rect)

    def update(self):
        self.draw()
        self.draw_health_bar()
        self.move()
        self.player_attack_hit()

class Centaur():
    def __init__(self,x,y,en,boy,speed):  
        self.images = {
            'idle': pygame.image.load('enemy/centaur/CentaurIdle.png'),
            'walk': pygame.image.load('enemy/centaur/CentaurWalk.png'),
            'attack': pygame.image.load('enemy/centaur/CentaurAttack.png')
        }
        self.endimage = self.images["idle"].subsurface(pygame.Rect(50, 55, 45, 45)) 
        self.x = x
        self.y = y
        self.en = en
        self.boy = boy
        self.rect = pygame.Rect(self.x, self.y, self.en, self.boy)
        self.speed = speed
        self.move_direction_rl, self.move_direction_du, self.move_status = "right", "down", 0
        self.attack = 0
        self.attack_animation_time = 0
        self.animation_time = 0
        self.health = 110
        self.animation_frame = 0
        self.attack_animation_frame = 0
        self.attack_rect = pygame.Rect(10000, 1000, 30, 30)
        self.right_down_imgs = [(50, 55, 45, 40),(210, 55, 45, 40),(370, 55, 45, 40),(530, 55, 45, 40)]
        self.left_down_imgs = [(65, 215, 45, 40),(225, 215, 45, 45),(385, 215, 45, 50),(545, 215, 45, 40)]
        self.right_up_imgs = [(50, 375, 45, 40),(210, 375, 45, 45),(370, 375, 45, 50),(530, 375, 45, 40)]
        self.left_up_imgs = [(65, 535, 45, 40),(225, 535, 45, 45),(385, 535, 45, 50),(545, 535, 45, 40)]
      
    def player_attack_hit(self):
        if self.rect.colliderect(attack.rect):
            if player.died == 0:
              self.health-=1.7
            if player.died == 1:
              self.health-=2
            if player.died == 2:
              self.health-=2.5
            if player.died == 3:
              self.health-=2.2
        for centaur in centaurs:
           if centaur.health <= 0:
               centaurs.remove(centaur)

    def move(self):
      moving_horizontally = False
      moving_vertically = False
      original_position = self.rect.topleft

      if abs(player.rect.x - self.rect.x) <= 50 and abs(player.rect.y - self.rect.y) <= 50 :
        self.attack = 1
      else:
        self.attack = 0

      distance_threshold = 250 
      if abs(player.rect.x - self.rect.x) <= distance_threshold and abs(player.rect.y - self.rect.y) <= distance_threshold:
          if player.rect.x > self.rect.x:
              self.rect.x += 2
              self.move_direction_rl = "right"
              moving_horizontally = True
          if player.rect.x < self.rect.x:
              self.rect.x -= 2
              self.move_direction_rl = "left"
              moving_horizontally = True

          if player.rect.y > self.rect.y:
              self.rect.y += 2
              self.move_direction_du = "down"
              moving_vertically = True
          if player.rect.y < self.rect.y:
              self.rect.y -= 2
              self.move_direction_du = "up"
              moving_vertically = True

      for wall in walls:
          if self.rect.colliderect(wall.rect):
              self.rect.topleft = original_position
              moving_horizontally = False
              moving_vertically = False
              break

      if moving_horizontally or moving_vertically:
            self.move_status = 1
      else:
            self.move_status = 0

      if self.move_status == 1:
              self.animation_time += 1
              if self.move_direction_rl == "right" and self.move_direction_du == "down":
                  if self.animation_time >= 8:
                        self.animation_frame = (self.animation_frame + 1) % len(self.right_down_imgs)
                        frame_rect = pygame.Rect(self.right_down_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.left_down_imgs)
                        frame_rect = pygame.Rect(self.left_down_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0

              elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.right_up_imgs)
                        frame_rect = pygame.Rect(self.right_up_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                  if self.animation_time >= 5:
                        self.animation_frame = (self.animation_frame + 1) % len(self.left_up_imgs)
                        frame_rect = pygame.Rect(self.left_up_imgs[self.animation_frame]) 
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0
      else:  
            if self.move_direction_rl == "right" and self.move_direction_du == "down" or player.rect.x > self.rect.x and player.rect.y > self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(50, 55, 45, 45)) 
            elif self.move_direction_rl == "left" and self.move_direction_du == "down" or player.rect.x < self.rect.x and player.rect.y > self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(65, 215, 45, 45)) 
            elif self.move_direction_rl == "right" and self.move_direction_du == "up" or player.rect.x > self.rect.x and player.rect.y < self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(50, 375, 45, 45)) 
            elif self.move_direction_rl == "left" and self.move_direction_du == "up" or player.rect.x < self.rect.x and player.rect.y < self.rect.y:
              self.endimage = self.images["idle"].subsurface(pygame.Rect(65, 535, 45, 45)) 

      if self.attack == 1:    
              self.attack_animation_time += 1
              if self.move_direction_rl == "right" and self.move_direction_du == "down":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(50, 50, 45, 45))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(210, 45, 40, 50))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+50,self.rect.y+10
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(380, 50, 60, 55))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+45,self.rect.y+40
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(540, 55, 55, 50))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+15,self.rect.y+40
                    if self.attack_animation_time >= 60:
                          self.attack_animation_time = 0
                          self.attack = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(65, 210, 45, 45))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(230, 205, 40, 50))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x,self.rect.y+10
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(360, 210, 60, 55))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+30,self.rect.y+40
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(525, 215, 55, 50))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+15,self.rect.y+45
                    if self.attack_animation_time >= 60:
                          self.attack_animation_time = 0
                          self.attack = 0
              elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(50, 370, 45, 45))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(210, 365, 40, 50))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+50,self.rect.y+20
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(380, 365, 60, 55))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+40,self.rect.y+10
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(540, 375, 55, 50))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+20,self.rect.y
                    if self.attack_animation_time >= 60:
                          self.attack_animation_time = 0
                          self.attack = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                    if self.attack_animation_time >= 8:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(65, 530, 45, 45))
                    if self.attack_animation_time >= 24:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(230, 525, 40, 50))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x,self.rect.y+20
                    if self.attack_animation_time >= 36:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(360, 525, 60, 55))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+30,self.rect.y+10
                    if self.attack_animation_time >= 48:
                          self.endimage = self.images["attack"].subsurface(pygame.Rect(525, 535, 55, 50))
                          self.attack_rect.x,self.attack_rect.y = self.rect.x+20,self.rect.y
                    if self.attack_animation_time >= 60:
                          self.attack_animation_time = 0
                          self.attack = 0
      else:
        self.attack_rect.x,self.attack_rect.y = 1000,1000

    def draw_health_bar(self):
      pygame.draw.rect(ekran,(0,0,0),(self.rect.x-30,self.rect.y-17,114,14))
      pygame.draw.rect(ekran,(255,0,0),(self.rect.x-28,self.rect.y-15,110,10))
      pygame.draw.rect(ekran,(0,255,0),(self.rect.x-28,self.rect.y-15,self.health,10))

    def draw(self):
        ekran.blit(self.endimage,self.rect)

    def update(self):
        self.draw()
        self.draw_health_bar()
        self.move()
        self.player_attack_hit()

class Player():
    def __init__(self,x,y,en,boy,speed):  
        self.images = {
            'idle': pygame.image.load('player/human/HumanIdle.png'),
            'walk': pygame.image.load('player/human/HumanWalk.png'),
            'attack': pygame.image.load('player/human/HumanAttack.png'),
            'die': pygame.image.load('player/human/HumanDie.png'),
            'water': pygame.image.load('player/human/HumanWater.png'),
            'idle_elf': pygame.image.load('player/elf/ElfIdle.png'),
            'walk_elf': pygame.image.load('player/elf/ElfWalk.png'),
            'attack_elf': pygame.image.load('player/elf/ElfAttack.png'),
            'die_elf': pygame.image.load('player/elf/ElfDie.png'),
            'water_elf': pygame.image.load('player/elf/ElfWater.png'),
            'idle_halfing': pygame.image.load('player/halfing/HalfingIdle.png'),
            'walk_halfing': pygame.image.load('player/halfing/Halfingwalk.png'),
            'attack_halfing': pygame.image.load('player/halfing/HalfingAttack.png'),
            'die_halfing': pygame.image.load('player/halfing/HalfingDie.png'),
            'water_halfing': pygame.image.load('player/halfing/HalfingWater.png'),
            'idle_dwarf': pygame.image.load('player/dwarf/YellowBeardIdle.png'),
            'walk_dwarf': pygame.image.load('player/dwarf/DwarfWalk.png'),
            'attack_dwarf': pygame.image.load('player/dwarf/DwarfAttack.png'),
            'die_dwarf': pygame.image.load('player/dwarf/DwarfDie.png'),
            'water_dwarf': pygame.image.load('player/dwarf/DwarfWater.png')
        }
        self.endimage = self.images["idle"].subsurface(pygame.Rect(60, 60, 35, 35)) 
        self.x = x
        self.y = y
        self.en = en
        self.boy = boy
        self.rect = pygame.Rect(self.x, self.y, self.en, self.boy)
        self.speed = speed
        self.wallhit = 0
        self.keyhit = 0
        self.button_rect = pygame.Rect(800,630,100,50)
        self.button2_rect = pygame.Rect(700,600,200,60)
        self.start_button = 0
        self.player_hit_goldheart = 0
        self.move_direction_rl, self.move_direction_du, self.move_status, self.direction, self.move_direction = "right", "down", 0, "stay", "right"
        self.attack, self.attack_time= 0, 0
        self.animation_time, self.animation_frame, self.die_animation_time, self.die_animation_time2, self.die_animation_time3, self.die_animation_time4 = 0, 0, 0, 0, 0, 0
        self.health, self.health_red, self.health_black = 180, 180, 184
        self.health_increase = 0
        self.died, self.human_died, self.dwarf_died, self.halfing_died, self.elf_died = 0, 0, 0, 0, 0
        self.darkening, self.darken_level = False, 0
        # imgs
        self.human_right_down_imgs,self.human_left_down_imgs ,self.human_right_up_imgs ,self.human_left_up_imgs= [(60, 60, 35, 35),(225, 55, 30, 40),(380, 60, 35, 35),(545, 55, 30, 40)],[(60, 220, 35, 35),(225, 215, 30, 40),(380, 220, 35, 35),(545, 215, 30, 40)], [(60, 380, 35, 35),(225, 375, 30, 40),(380, 380, 35, 35),(545, 375, 30, 40)], [(60, 540, 35, 35),(225, 535, 30, 40),(380, 540, 35, 35),(545, 535, 30, 40)]
        self.dwarf_right_down_imgs, self.dwarf_left_down_imgs, self.dwarf_right_up_imgs, self.dwarf_left_up_imgs= [(60, 60, 45, 35),(220, 55, 35, 40),(375, 60, 45, 35),(540, 55, 35, 40)], [(60, 220, 45, 35),(225, 215, 35, 40),(380, 220, 45, 35),(545, 215, 35, 40)], [(60, 380, 45, 35),(220, 375, 35, 40),(375, 380, 45, 35),(540, 375, 35, 40)],[(60, 540, 45, 35),(225, 535, 35, 40),(380, 540, 45, 35),(545, 535, 35, 40)]
        self.halfing_right_down_imgs, self.halfing_left_down_imgs, self.halfing_right_up_imgs, self.halfing_left_up_imgs  = [(60, 65, 35, 30),(225, 60, 30, 35),(380, 65, 35, 30),(545, 60, 30, 35)], [(60, 225, 45, 35),(225, 220, 35, 40),(385, 225, 45, 35),(545, 220, 35, 40)], [(60, 380, 45, 35),(220, 375, 35, 40),(375, 380, 45, 35),(540, 375, 35, 40)], [(60, 540, 45, 35),(225, 535, 35, 40),(380, 540, 45, 35),(545, 535, 35, 40)]
        self.elf_right_down_imgs, self.elf_left_down_imgs, self.elf_right_up_imgs, self.elf_left_up_imgs  = [(60, 60, 35, 35),(220, 55, 35, 40),(380, 60, 35, 35),(540, 55, 35, 40)], [(65, 220, 35, 35),(225, 215, 35, 40),(385, 220, 35, 35),(545, 215, 35, 40)], [(60, 380, 35, 35),(220, 375, 35, 40),(380, 380, 35, 35),(540, 375, 35, 40)], [(65, 540, 35, 35),(220, 535, 35, 40),(380, 540, 35, 35),(540, 535, 35, 40)]
        
    def goldheart_hit(self):
      if self.rect.colliderect(goldheart.rect):
        self.endimage = self.images["idle"].subsurface(pygame.Rect(220, 35, 40, 65))
      
    def start(self):
      if not hasattr(self, 'text_y2'):
          self.text_y2 = 70
      if not hasattr(self, 'text2_y2'):
          self.text2_y2 = 130
      if not hasattr(self, 'text3_y2'):
          self.text3_y2 = 190
      if not hasattr(self, 'text4_y2'):
          self.text4_y2 = 630
      if not hasattr(self, 'text5_y2'):
          self.text5_y2 = 250
  
      pygame.draw.rect(ekran, (0, 0, 0), (0, 0, width, height))
      font = pygame.font.Font("pixel_font.otf", 45)
      font2 = pygame.font.Font("pixel_font.otf", 50)

      text = font.render("Hello player, you don't know why you are in this dun_", True, (255, 255, 255))
      text2 = font.render("geon, do you? Let me tell you, your goal is to find a", True, (255, 255, 255))
      text3 = font.render("piece of gold, which is the heart of the dungeon.Good", True, (255, 255, 255))
      text5 = font.render("luck...", True, (255, 255, 255))
      text4 = font2.render("START", True, (255, 255, 255))

      ekran.blit(text, (40, self.text_y2))
      ekran.blit(text2, (25, self.text2_y2))
      ekran.blit(text3, (25, self.text3_y2))
      ekran.blit(text4, (800, self.text4_y2))
      ekran.blit(text5, (25, self.text5_y2))

    def end(self):
      if not hasattr(self, 'text_y'):
          self.text_y = 240
      if not hasattr(self, 'text2_y'):
          self.text2_y = 330
      if not hasattr(self, 'text3_y'):
          self.text3_y = 440
      if not hasattr(self, 'text4_y'):
          self.text4_y = 740
      if not hasattr(self, 'text5_y'):
          self.text5_y = 510
      
      if self.rect.colliderect(goldheart.rect):
          self.player_hit_goldheart = 1
      
      if self.player_hit_goldheart == 1:
          pygame.draw.rect(ekran, (0, 0, 0), (0, 0, width, height))
          font = pygame.font.Font("pixel_font.otf", 60)
          font2 = pygame.font.Font("pixel_font.otf", 50)

          text = font.render("You have achieved your goal, you", True, (255, 255, 255))
          text2 = font.render("have found the heart of the dungeon.", True, (255, 255, 255))
          text3 = font.render("The End", True, (255, 255, 255))
          text5 = font.render("Thanks for playing!!!", True, (255, 255, 255))
          text4 = font2.render("Maker:Github with the name ALIKuzgun", True, (255, 255, 255))

          ekran.blit(text, (85, self.text_y))
          ekran.blit(text2, (55, self.text2_y))
          ekran.blit(text3, (375, self.text3_y))
          ekran.blit(text4, (85, self.text4_y))
          ekran.blit(text5, (245, self.text5_y))

          self.text_y -= 2
          self.text2_y -= 2
          self.text3_y -= 2
          self.text4_y -= 2
          self.text5_y -= 2

    def wall_hit(self, move_x, move_y):
        new_rect = self.rect.move(move_x, move_y)
        for wall in walls:
            if new_rect.colliderect(wall.rect): 
                if move_x > 0:
                    new_rect.right = wall.rect.left
                    self.wallhit = 1
                if move_x < 0:
                    new_rect.left = wall.rect.right
                    self.wallhit = 1
                if move_y > 0:
                    new_rect.bottom = wall.rect.top
                    self.wallhit = 1
                if move_y < 0:
                    new_rect.top = wall.rect.bottom
                    self.wallhit = 1
                break  
            elif new_rect.colliderect(door.rect): 
              if self.keyhit == 0:
                font = pygame.font.Font("pixel_font.otf", 50)
                text = font.render("You need key!", True, (255, 255, 255))
                ekran.blit(text, (self.rect.x-80, self.rect.y - 50))
                if move_x > 0:
                    new_rect.right = door.rect.left
                    self.wallhit = 1
                if move_x < 0:
                    new_rect.left = door.rect.right
                    self.wallhit = 1
                if move_y > 0:
                    new_rect.bottom = door.rect.top
                    self.wallhit = 1
                if move_y < 0:
                    new_rect.top = door.rect.bottom
                    self.wallhit = 1
                break  
              else:
                door.rect.x = 10000
            else:
                self.wallhit = 0
        self.rect = new_rect 

    def die(self):
      if self.human_died == 1:
          self.darkening = True 
          self.die_animation_time += 1  
          if self.die_animation_time >= 5:
            self.endimage = self.images["die"].subsurface(pygame.Rect(60, 60, 35, 35))
          if self.die_animation_time >= 15:
            self.endimage = self.images["die"].subsurface(pygame.Rect(215, 60, 30, 35))
          if self.die_animation_time >= 25:
            self.endimage = self.images["die"].subsurface(pygame.Rect(370, 60, 35, 35))
          if self.die_animation_time >= 35:
            self.endimage = self.images["die"].subsurface(pygame.Rect(540, 60, 30, 35))
          if self.die_animation_time >= 45:
            self.endimage = self.images["die"].subsurface(pygame.Rect(700, 60, 35, 35))
          if self.die_animation_time >= 55:
            self.endimage = self.images["die"].subsurface(pygame.Rect(850, 60, 40, 35))
          if self.die_animation_time >= 65:
            self.endimage = self.images["die"].subsurface(pygame.Rect(1010, 60, 40, 30))
          if self.die_animation_time >= 75:
            self.human_died = 2    
      if self.dwarf_died == 1:
          self.darkening = True 
          self.die_animation_time2 += 1  
          if self.die_animation_time2 >= 5:
            self.endimage = self.images["die_dwarf"].subsurface(pygame.Rect(55, 60, 45, 35))
          if self.die_animation_time2 >= 15:
            self.endimage = self.images["die_dwarf"].subsurface(pygame.Rect(215, 60, 35, 35))
          if self.die_animation_time2 >= 25:
            self.endimage = self.images["die_dwarf"].subsurface(pygame.Rect(360, 60, 45, 35))
          if self.die_animation_time2 >= 35:
            self.endimage = self.images["die_dwarf"].subsurface(pygame.Rect(535, 60, 30, 35))
          if self.die_animation_time2 >= 45:
            self.endimage = self.images["die_dwarf"].subsurface(pygame.Rect(695, 60, 40, 35))
          if self.die_animation_time2 >= 55:
            self.endimage = self.images["die_dwarf"].subsurface(pygame.Rect(845, 60, 45, 35))
          if self.die_animation_time2 >= 65:
            self.endimage = self.images["die_dwarf"].subsurface(pygame.Rect(1005, 70, 40, 30))
          if self.die_animation_time2 >= 80:
            self.dwarf_died = 2    
      if self.halfing_died == 1:
          self.darkening = True 
          self.die_animation_time3 += 1  
          if self.die_animation_time3 >= 5:
            self.endimage = self.images["die_halfing"].subsurface(pygame.Rect(60, 65, 35, 30))
          if self.die_animation_time3 >= 15:
            self.endimage = self.images["die_halfing"].subsurface(pygame.Rect(215, 65, 30, 30))
          if self.die_animation_time3 >= 25:
            self.endimage = self.images["die_halfing"].subsurface(pygame.Rect(370, 65, 35, 30))
          if self.die_animation_time3 >= 35:
            self.endimage = self.images["die_halfing"].subsurface(pygame.Rect(540, 65, 30, 30))
          if self.die_animation_time3 >= 45:
            self.endimage = self.images["die_halfing"].subsurface(pygame.Rect(700, 65, 35, 30))
          if self.die_animation_time3 >= 55:
            self.endimage = self.images["die_halfing"].subsurface(pygame.Rect(850, 65, 40, 30))
          if self.die_animation_time3 >= 65:
            self.endimage = self.images["die_halfing"].subsurface(pygame.Rect(1010, 70, 35, 30))
          if self.die_animation_time3 >= 75:
            self.halfing_died = 2    
      if self.elf_died == 1:
          self.darkening = True 
          self.die_animation_time4 += 1  
          if self.die_animation_time4 >= 5:
            self.endimage = self.images["die_elf"].subsurface(pygame.Rect(60, 60, 35, 35))
          if self.die_animation_time4 >= 15:
            self.endimage = self.images["die_elf"].subsurface(pygame.Rect(215, 60, 35, 35))
          if self.die_animation_time4 >= 25:
            self.endimage = self.images["die_elf"].subsurface(pygame.Rect(370, 60, 35, 35))
          if self.die_animation_time4 >= 35:
            self.endimage = self.images["die_elf"].subsurface(pygame.Rect(535, 60, 35, 35))
          if self.die_animation_time4 >= 45:
            self.endimage = self.images["die_elf"].subsurface(pygame.Rect(695, 60, 40, 35))
          if self.die_animation_time4 >= 55:
            self.endimage = self.images["die_elf"].subsurface(pygame.Rect(845, 60, 45, 35))
          if self.die_animation_time4 >= 65:
            self.endimage = self.images["die_elf"].subsurface(pygame.Rect(1010, 70, 40, 30))
          if self.die_animation_time4 >= 75:
            self.elf_died = 2    
      if self.darkening:
        self.darken_level += 25  
        if self.darken_level >= 255:
          if self.human_died==2 and self.dwarf_died != 1 and self.halfing_died != 1 and self.elf_died != 1 or self.dwarf_died==2 and self.halfing_died != 1 and self.elf_died != 1 or self.halfing_died==2 and self.elf_died != 1 or self.elf_died == 2 :
            self.darkening = False    
      else:
        if self.darken_level > 0:
            self.darken_level -= 25

    def move(self):
      move_x, move_y = 0, 0
      key = pygame.key.get_pressed()

      moving_horizontally, moving_vertically = False, False

      if key[pygame.K_RIGHT]:
         move_x  += self.speed
         self.move_direction_rl, self.direction, self.move_direction = "right", "right", "right"
         moving_horizontally = True
      elif key[pygame.K_LEFT]:
         move_x  -= self.speed
         self.move_direction_rl, self.direction, self.move_direction = "left", "left", "left"
         moving_horizontally = True
      elif key[pygame.K_UP]:
         move_y  -= self.speed
         self.move_direction_du, self.direction, self.move_direction = "up", "up", "up"
         moving_vertically = True
      elif key[pygame.K_DOWN]:
         move_y += self.speed
         self.move_direction_du, self.direction, self.move_direction = "down", "down", "down"
         moving_vertically = True
      else:
         self.direction = "stay"
      self.wall_hit(move_x, move_y)

      if moving_horizontally or moving_vertically:
         self.move_status = 1
         self.attack = 0
      else:
         self.move_status = 0

      if self.died==0:
            if self.move_status == 1:
              self.animation_time += 1
              if self.move_direction_rl == "right" and self.move_direction_du == "down":
                  if self.animation_time >= 8:
                        self.animation_frame = (self.animation_frame + 1) % len(self.human_right_down_imgs)
                        frame_rect = pygame.Rect(self.human_right_down_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                  if self.animation_time >= 8:
                        self.animation_frame = (self.animation_frame + 1) % len(self.human_left_down_imgs)
                        frame_rect = pygame.Rect(self.human_left_down_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0
              elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                  if self.animation_time >= 8:
                        self.animation_frame = (self.animation_frame + 1) % len(self.human_right_up_imgs)
                        frame_rect = pygame.Rect(self.human_right_up_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                  if self.animation_time >= 8:
                        self.animation_frame = (self.animation_frame + 1) % len(self.human_left_up_imgs)
                        frame_rect = pygame.Rect(self.human_left_up_imgs[self.animation_frame])
                        self.endimage = self.images["walk"].subsurface(frame_rect)
                        self.animation_time = 0
            else:
                if self.move_direction_rl == "right" and self.move_direction_du == "down":
                  self.endimage = self.images["idle"].subsurface(pygame.Rect(60, 60, 35, 35))
                elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                  self.endimage = self.images["idle"].subsurface(pygame.Rect(60, 220, 42, 35))
                elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                  self.endimage = self.images["idle"].subsurface(pygame.Rect(60, 380, 35, 35))
                elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                  self.endimage = self.images["idle"].subsurface(pygame.Rect(60, 540, 42, 35))

      if self.died==1:
              if self.move_status == 1:
                  self.animation_time += 1
                  if self.move_direction_rl == "right" and self.move_direction_du == "down":
                      if self.animation_time >= 8:
                            self.animation_frame = (self.animation_frame + 1) % len(self.dwarf_right_down_imgs)
                            frame_rect = pygame.Rect(self.dwarf_right_down_imgs[self.animation_frame])
                            self.endimage = self.images["walk_dwarf"].subsurface(frame_rect)
                            self.animation_time = 0
                  elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                      if self.animation_time >= 8:
                            self.animation_frame = (self.animation_frame + 1) % len(self.dwarf_left_down_imgs)
                            frame_rect = pygame.Rect(self.dwarf_left_down_imgs[self.animation_frame])
                            self.endimage = self.images["walk_dwarf"].subsurface(frame_rect)
                            self.animation_time = 0
                  elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                      if self.animation_time >= 8:
                            self.animation_frame = (self.animation_frame + 1) % len(self.dwarf_right_up_imgs)
                            frame_rect = pygame.Rect(self.dwarf_right_up_imgs[self.animation_frame])
                            self.endimage = self.images["walk_dwarf"].subsurface(frame_rect)
                            self.animation_time = 0
                  elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                      if self.animation_time >= 8:
                            self.animation_frame = (self.animation_frame + 1) % len(self.dwarf_left_up_imgs)
                            frame_rect = pygame.Rect(self.dwarf_left_up_imgs[self.animation_frame])
                            self.endimage = self.images["walk_dwarf"].subsurface(frame_rect)
                            self.animation_time = 0
              else:
                if self.move_direction_rl == "right" and self.move_direction_du == "down":
                  self.endimage = self.images["idle_dwarf"].subsurface(pygame.Rect(55, 60, 45, 35))
                elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                  self.endimage = self.images["idle_dwarf"].subsurface(pygame.Rect(60, 220, 45, 35))
                elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                  self.endimage = self.images["idle_dwarf"].subsurface(pygame.Rect(55, 380, 45, 35))
                elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                  self.endimage = self.images["idle_dwarf"].subsurface(pygame.Rect(60, 540, 45, 35))

      if self.died==2:
            if self.move_status == 1:
              self.animation_time += 1
              if self.move_direction_rl == "right" and self.move_direction_du == "down":
                  if self.animation_time >= 8:
                        self.animation_frame = (self.animation_frame + 1) % len(self.halfing_right_down_imgs)
                        frame_rect = pygame.Rect(self.halfing_right_down_imgs[self.animation_frame])
                        self.endimage = self.images["walk_halfing"].subsurface(frame_rect)
                        self.animation_time = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                  if self.animation_time >= 8:
                        self.animation_frame = (self.animation_frame + 1) % len(self.halfing_left_down_imgs)
                        frame_rect = pygame.Rect(self.halfing_left_down_imgs[self.animation_frame])
                        self.endimage = self.images["walk_halfing"].subsurface(frame_rect)
                        self.animation_time = 0
              elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                  if self.animation_time >= 8:
                        self.animation_frame = (self.animation_frame + 1) % len(self.halfing_right_up_imgs)
                        frame_rect = pygame.Rect(self.halfing_right_up_imgs[self.animation_frame])
                        self.endimage = self.images["walk_halfing"].subsurface(frame_rect)
                        self.animation_time = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                  if self.animation_time >= 8:
                        self.animation_frame = (self.animation_frame + 1) % len(self.halfing_left_up_imgs)
                        frame_rect = pygame.Rect(self.halfing_left_up_imgs[self.animation_frame])
                        self.endimage = self.images["walk_halfing"].subsurface(frame_rect)
                        self.animation_time = 0
            else:
                if self.move_direction_rl == "right" and self.move_direction_du == "down":
                  self.endimage = self.images["walk_halfing"].subsurface(pygame.Rect(60, 60, 35, 35))
                elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                  self.endimage = self.images["walk_halfing"].subsurface(pygame.Rect(60, 220, 42, 35))
                elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                  self.endimage = self.images["walk_halfing"].subsurface(pygame.Rect(60, 380, 35, 35))
                elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                  self.endimage = self.images["walk_halfing"].subsurface(pygame.Rect(60, 540, 42, 35))

      if self.died==3:
            if self.move_status == 1:
              self.animation_time += 1
              if self.move_direction_rl == "right" and self.move_direction_du == "down":
                  if self.animation_time >= 8:
                        self.animation_frame = (self.animation_frame + 1) % len(self.elf_right_down_imgs)
                        frame_rect = pygame.Rect(self.elf_right_down_imgs[self.animation_frame])
                        self.endimage = self.images["walk_elf"].subsurface(frame_rect)
                        self.animation_time = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                  if self.animation_time >= 8:
                        self.animation_frame = (self.animation_frame + 1) % len(self.elf_left_down_imgs)
                        frame_rect = pygame.Rect(self.elf_left_down_imgs[self.animation_frame])
                        self.endimage = self.images["walk_elf"].subsurface(frame_rect)
                        self.animation_time = 0
              elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                  if self.animation_time >= 8:
                        self.animation_frame = (self.animation_frame + 1) % len(self.elf_right_up_imgs)
                        frame_rect = pygame.Rect(self.elf_right_up_imgs[self.animation_frame])
                        self.endimage = self.images["walk_elf"].subsurface(frame_rect)
                        self.animation_time = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                  if self.animation_time >= 8:
                        self.animation_frame = (self.animation_frame + 1) % len(self.elf_left_up_imgs)
                        frame_rect = pygame.Rect(self.elf_left_up_imgs[self.animation_frame])
                        self.endimage = self.images["walk_elf"].subsurface(frame_rect)
                        self.animation_time = 0
            else:
                if self.move_direction_rl == "right" and self.move_direction_du == "down":
                  self.endimage = self.images["walk_elf"].subsurface(pygame.Rect(60, 60, 35, 35))
                elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                  self.endimage = self.images["walk_elf"].subsurface(pygame.Rect(60, 220, 42, 35))
                elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                  self.endimage = self.images["walk_elf"].subsurface(pygame.Rect(60, 380, 35, 35))
                elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                  self.endimage = self.images["walk_elf"].subsurface(pygame.Rect(60, 540, 42, 35))

      if key[pygame.K_SPACE]:
            self.attack = 1
      
      if self.attack == 1:
            self.animation_time += 1  
            if self.died == 0:
              if self.move_direction_rl == "right" and self.move_direction_du == "down":
                  if self.animation_time >= 5:
                    self.endimage = self.images["attack"].subsurface(pygame.Rect(60, 60, 40, 35))
                  if self.animation_time >= 15:
                    self.endimage = self.images["attack"].subsurface(pygame.Rect(230, 60, 65, 40))
                    attack.rect.x,attack.rect.y = self.rect.x+40,self.rect.y+15
                  if self.animation_time >= 25:
                    self.endimage = self.images["attack"].subsurface(pygame.Rect(395, 60, 55, 50))
                    attack.rect.x,attack.rect.y = self.rect.x+35,self.rect.y+35
                  if self.animation_time >= 35:
                    self.endimage = self.images["attack"].subsurface(pygame.Rect(555, 60, 35, 50))
                    attack.rect.x,attack.rect.y = self.rect.x,self.rect.y+40
                  if self.animation_time >= 45:
                    self.animation_time = 0
                    self.attack = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                  if self.animation_time >= 5:
                    self.endimage = self.images["attack"].subsurface(pygame.Rect(60, 220, 40, 35))
                  if self.animation_time >= 15:
                    self.endimage = self.images["attack"].subsurface(pygame.Rect(190, 220, 60, 40))
                    attack.rect.x,attack.rect.y = self.rect.x,self.rect.y+15
                  if self.animation_time >= 25:
                    self.endimage = self.images["attack"].subsurface(pygame.Rect(350, 220, 55, 60))
                    attack.rect.x,attack.rect.y = self.rect.x-5,self.rect.y+35
                  if self.animation_time >= 35:
                    self.endimage = self.images["attack"].subsurface(pygame.Rect(525, 220, 45, 60))
                    attack.rect.x,attack.rect.y = self.rect.x+10,self.rect.y+40
                  if self.animation_time >= 45:
                    self.animation_time = 0
                    self.attack = 0
              elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                  if self.animation_time >= 5:
                    self.endimage = self.images["attack"].subsurface(pygame.Rect(60, 380, 45, 35))
                  if self.animation_time >= 15:
                    self.endimage = self.images["attack"].subsurface(pygame.Rect(230, 380, 60, 35))
                    attack.rect.x,attack.rect.y = self.rect.x+40,self.rect.y+15
                  if self.animation_time >= 25:
                    self.endimage = self.images["attack"].subsurface(pygame.Rect(395, 380, 60, 35))
                    attack.rect.x,attack.rect.y = self.rect.x+35,self.rect.y
                  if self.animation_time >= 35:
                    self.endimage = self.images["attack"].subsurface(pygame.Rect(555, 380, 35, 35))
                    attack.rect.x,attack.rect.y = self.rect.x+10,self.rect.y
                  if self.animation_time >= 45:
                    self.animation_time = 0
                    self.attack = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                  if self.animation_time >= 5:
                    self.endimage = self.images["attack"].subsurface(pygame.Rect(60, 540, 40, 35))
                  if self.animation_time >= 15:
                    self.endimage = self.images["attack"].subsurface(pygame.Rect(190, 540, 60, 35))
                    attack.rect.x,attack.rect.y = self.rect.x,self.rect.y+10
                  if self.animation_time >= 25:
                    self.endimage = self.images["attack"].subsurface(pygame.Rect(350, 535, 55, 40))
                    attack.rect.x,attack.rect.y = self.rect.x,self.rect.y
                  if self.animation_time >= 35:
                    self.endimage = self.images["attack"].subsurface(pygame.Rect(525, 540, 35, 40))
                    attack.rect.x,attack.rect.y = self.rect.x+10,self.rect.y
                  if self.animation_time >= 45:
                    self.animation_time = 0
                    self.attack = 0

            if self.died == 1:
              if self.move_direction_rl == "right" and self.move_direction_du == "down":
                  if self.animation_time >= 5:
                    self.endimage = self.images["attack_dwarf"].subsurface(pygame.Rect(55, 60, 50, 35))
                  if self.animation_time >= 15:
                    self.endimage = self.images["attack_dwarf"].subsurface(pygame.Rect(225, 60, 65, 40))
                    attack.rect.x,attack.rect.y = self.rect.x+40,self.rect.y+15
                  if self.animation_time >= 25:
                    self.endimage = self.images["attack_dwarf"].subsurface(pygame.Rect(390, 60, 65, 55))
                    attack.rect.x,attack.rect.y = self.rect.x+35,self.rect.y+35
                  if self.animation_time >= 35:
                    self.endimage = self.images["attack_dwarf"].subsurface(pygame.Rect(550, 60, 40, 55))
                    attack.rect.x,attack.rect.y = self.rect.x,self.rect.y+40
                  if self.animation_time >= 45:
                    self.animation_time = 0
                    self.attack = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                  if self.animation_time >= 5:
                    self.endimage = self.images["attack_dwarf"].subsurface(pygame.Rect(55, 220, 50, 35))
                  if self.animation_time >= 15:
                    self.endimage = self.images["attack_dwarf"].subsurface(pygame.Rect(185, 220, 65, 40))
                    attack.rect.x,attack.rect.y = self.rect.x,self.rect.y+15
                  if self.animation_time >= 25:
                    self.endimage = self.images["attack_dwarf"].subsurface(pygame.Rect(345, 220, 65, 55))
                    attack.rect.x,attack.rect.y = self.rect.x-5,self.rect.y+35
                  if self.animation_time >= 35:
                    self.endimage = self.images["attack_dwarf"].subsurface(pygame.Rect(525, 220, 40, 55))
                    attack.rect.x,attack.rect.y = self.rect.x+10,self.rect.y+40
                  if self.animation_time >= 45:
                    self.animation_time = 0
                    self.attack = 0
              elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                  if self.animation_time >= 5:
                    self.endimage = self.images["attack_dwarf"].subsurface(pygame.Rect(55, 380, 50, 35))
                  if self.animation_time >= 15:
                    self.endimage = self.images["attack_dwarf"].subsurface(pygame.Rect(225, 380, 65, 40))
                    attack.rect.x,attack.rect.y = self.rect.x+40,self.rect.y+15
                  if self.animation_time >= 25:
                    self.endimage = self.images["attack_dwarf"].subsurface(pygame.Rect(390, 380, 65, 35))
                    attack.rect.x,attack.rect.y = self.rect.x+35,self.rect.y
                  if self.animation_time >= 35:
                    self.endimage = self.images["attack_dwarf"].subsurface(pygame.Rect(545, 380, 45, 35))
                    attack.rect.x,attack.rect.y = self.rect.x+10,self.rect.y
                  if self.animation_time >= 45:
                    self.animation_time = 0
                    self.attack = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                  if self.animation_time >= 5:
                    self.endimage = self.images["attack_dwarf"].subsurface(pygame.Rect(55, 540, 50, 35))
                  if self.animation_time >= 15:
                    self.endimage = self.images["attack_dwarf"].subsurface(pygame.Rect(190, 540, 65, 40))
                    attack.rect.x,attack.rect.y = self.rect.x,self.rect.y+10
                  if self.animation_time >= 25:
                    self.endimage = self.images["attack_dwarf"].subsurface(pygame.Rect(345, 540, 65, 35))
                    attack.rect.x,attack.rect.y = self.rect.x,self.rect.y
                  if self.animation_time >= 35:
                    self.endimage = self.images["attack_dwarf"].subsurface(pygame.Rect(530, 540, 45, 35))
                    attack.rect.x,attack.rect.y = self.rect.x+10,self.rect.y
                  if self.animation_time >= 45:
                    self.animation_time = 0
                    self.attack = 0     
    
            if self.died == 2:
              if self.move_direction_rl == "right" and self.move_direction_du == "down":
                  if self.animation_time >= 5:
                    self.endimage = self.images["attack_halfing"].subsurface(pygame.Rect(60, 50, 45, 45))
                  if self.animation_time >= 15:
                    self.endimage = self.images["attack_halfing"].subsurface(pygame.Rect(230, 65, 70, 35))
                    attack.rect.x,attack.rect.y = self.rect.x+40,self.rect.y+15
                  if self.animation_time >= 25:
                    self.endimage = self.images["attack_halfing"].subsurface(pygame.Rect(395, 65, 55, 50))
                    attack.rect.x,attack.rect.y = self.rect.x+35,self.rect.y+35
                  if self.animation_time >= 35:
                    self.endimage = self.images["attack_halfing"].subsurface(pygame.Rect(555, 65, 35, 50))
                    attack.rect.x,attack.rect.y = self.rect.x,self.rect.y+40
                  if self.animation_time >= 45:
                    self.animation_time = 0
                    self.attack = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                  if self.animation_time >= 5:
                    self.endimage = self.images["attack_halfing"].subsurface(pygame.Rect(55, 210, 45, 45))
                  if self.animation_time >= 15:
                    self.endimage = self.images["attack_halfing"].subsurface(pygame.Rect(180, 225, 70, 35))
                    attack.rect.x,attack.rect.y = self.rect.x,self.rect.y+15
                  if self.animation_time >= 25:
                    self.endimage = self.images["attack_halfing"].subsurface(pygame.Rect(350, 225, 55, 50))
                    attack.rect.x,attack.rect.y = self.rect.x-5,self.rect.y+35
                  if self.animation_time >= 35:
                    self.endimage = self.images["attack_halfing"].subsurface(pygame.Rect(530, 225, 35, 50))
                    attack.rect.x,attack.rect.y = self.rect.x+10,self.rect.y+40
                  if self.animation_time >= 45:
                    self.animation_time = 0
                    self.attack = 0
              elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                  if self.animation_time >= 5:
                    self.endimage = self.images["attack_halfing"].subsurface(pygame.Rect(60, 370, 40, 45))
                  if self.animation_time >= 15:
                    self.endimage = self.images["attack_halfing"].subsurface(pygame.Rect(230, 385, 70, 35))
                    attack.rect.x,attack.rect.y = self.rect.x+40,self.rect.y+15
                  if self.animation_time >= 25:
                    self.endimage = self.images["attack_halfing"].subsurface(pygame.Rect(395, 380, 55, 35))
                    attack.rect.x,attack.rect.y = self.rect.x+35,self.rect.y
                  if self.animation_time >= 35:
                    self.endimage = self.images["attack_halfing"].subsurface(pygame.Rect(555, 380, 35, 35))
                    attack.rect.x,attack.rect.y = self.rect.x+10,self.rect.y
                  if self.animation_time >= 45:
                    self.animation_time = 0
                    self.attack = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                  if self.animation_time >= 5:
                    self.endimage = self.images["attack_halfing"].subsurface(pygame.Rect(60, 530, 40, 45))
                  if self.animation_time >= 15:
                    self.endimage = self.images["attack_halfing"].subsurface(pygame.Rect(180, 540, 70, 35))
                    attack.rect.x,attack.rect.y = self.rect.x+40,self.rect.y+15
                  if self.animation_time >= 25:
                    self.endimage = self.images["attack_halfing"].subsurface(pygame.Rect(350, 540, 55, 35))
                    attack.rect.x,attack.rect.y = self.rect.x+35,self.rect.y
                  if self.animation_time >= 35:
                    self.endimage = self.images["attack_halfing"].subsurface(pygame.Rect(530, 540, 35, 35))
                    attack.rect.x,attack.rect.y = self.rect.x+10,self.rect.y
                  if self.animation_time >= 45:
                    self.animation_time = 0
                    self.attack = 0     
           
            if self.died == 3:
              if self.move_direction_rl == "right" and self.move_direction_du == "down":
                  if self.animation_time >= 5:
                    self.endimage = self.images["attack_elf"].subsurface(pygame.Rect(60, 55, 40, 40))
                  if self.animation_time >= 15:
                    self.endimage = self.images["attack_elf"].subsurface(pygame.Rect(230, 60, 60, 35))
                    attack.rect.x,attack.rect.y = self.rect.x+40,self.rect.y+15
                  if self.animation_time >= 25:
                    self.endimage = self.images["attack_elf"].subsurface(pygame.Rect(395, 55, 50, 50))
                    attack.rect.x,attack.rect.y = self.rect.x+35,self.rect.y+35
                  if self.animation_time >= 35:
                    self.endimage = self.images["attack_elf"].subsurface(pygame.Rect(555, 60, 35, 50))
                    attack.rect.x,attack.rect.y = self.rect.x,self.rect.y+40
                  if self.animation_time >= 45:
                    self.animation_time = 0
                    self.attack = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                  if self.animation_time >= 5:
                    self.endimage = self.images["attack_elf"].subsurface(pygame.Rect(60, 215, 40, 40))
                  if self.animation_time >= 15:
                    self.endimage = self.images["attack_elf"].subsurface(pygame.Rect(190, 220, 60, 35))
                    attack.rect.x,attack.rect.y = self.rect.x,self.rect.y+15
                  if self.animation_time >= 25:
                    self.endimage = self.images["attack_elf"].subsurface(pygame.Rect(350, 220, 60, 50))
                    attack.rect.x,attack.rect.y = self.rect.x-5,self.rect.y+35
                  if self.animation_time >= 35:
                    self.endimage = self.images["attack_elf"].subsurface(pygame.Rect(530, 220, 35, 50))
                    attack.rect.x,attack.rect.y = self.rect.x+10,self.rect.y+40
                  if self.animation_time >= 45:
                    self.animation_time = 0
                    self.attack = 0
              elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                  if self.animation_time >= 5:
                    self.endimage = self.images["attack_elf"].subsurface(pygame.Rect(60, 375, 40, 40))
                  if self.animation_time >= 15:
                    self.endimage = self.images["attack_elf"].subsurface(pygame.Rect(230, 380, 60, 35))
                    attack.rect.x,attack.rect.y = self.rect.x+40,self.rect.y+15
                  if self.animation_time >= 25:
                    self.endimage = self.images["attack_elf"].subsurface(pygame.Rect(395, 380, 55, 40))
                    attack.rect.x,attack.rect.y = self.rect.x+35,self.rect.y
                  if self.animation_time >= 35:
                    self.endimage = self.images["attack_elf"].subsurface(pygame.Rect(555, 380, 35, 40))
                    attack.rect.x,attack.rect.y = self.rect.x+10,self.rect.y
                  if self.animation_time >= 45:
                    self.animation_time = 0
                    self.attack = 0
              elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                  if self.animation_time >= 5:
                    self.endimage = self.images["attack_elf"].subsurface(pygame.Rect(60, 535, 40, 40))
                  if self.animation_time >= 15:
                    self.endimage = self.images["attack_elf"].subsurface(pygame.Rect(190, 540, 60, 35))
                    attack.rect.x,attack.rect.y = self.rect.x+40,self.rect.y+15
                  if self.animation_time >= 25:
                    self.endimage = self.images["attack_elf"].subsurface(pygame.Rect(350, 540, 60, 40))
                    attack.rect.x,attack.rect.y = self.rect.x+35,self.rect.y
                  if self.animation_time >= 35:
                    self.endimage = self.images["attack_elf"].subsurface(pygame.Rect(530, 540, 35, 40))
                    attack.rect.x,attack.rect.y = self.rect.x+10,self.rect.y
                  if self.animation_time >= 45:
                    self.animation_time = 0
                    self.attack = 0     
      else:
            attack.rect.x,attack.rect.y = 1000,1000

      for water in waters:
        if self.rect.colliderect(water.rect):
            if self.died == 0:
                if self.move_direction_rl == "right" and self.move_direction_du == "down":
                  self.endimage = self.images["water"].subsurface(pygame.Rect(60, 60, 35, 35))
                elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                  self.endimage = self.images["water"].subsurface(pygame.Rect(60, 220, 42, 35))
                elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                  self.endimage = self.images["water"].subsurface(pygame.Rect(60, 380, 35, 35))
                elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                  self.endimage = self.images["water"].subsurface(pygame.Rect(60, 540, 42, 35))
            if self.died == 1:
                if self.move_direction_rl == "right" and self.move_direction_du == "down":
                  self.endimage = self.images["water_dwarf"].subsurface(pygame.Rect(55, 60, 45, 35))
                elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                  self.endimage = self.images["water_dwarf"].subsurface(pygame.Rect(60, 220, 45, 35))
                elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                  self.endimage = self.images["water_dwarf"].subsurface(pygame.Rect(55, 380, 45, 35))
                elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                  self.endimage = self.images["water_dwarf"].subsurface(pygame.Rect(60, 540, 45, 35))
            if self.died == 2:
                if self.move_direction_rl == "right" and self.move_direction_du == "down":
                  self.endimage = self.images["water_halfing"].subsurface(pygame.Rect(60, 60, 35, 35))
                elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                  self.endimage = self.images["water_halfing"].subsurface(pygame.Rect(60, 220, 42, 35))
                elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                  self.endimage = self.images["water_halfing"].subsurface(pygame.Rect(60, 380, 35, 35))
                elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                  self.endimage = self.images["water_halfing"].subsurface(pygame.Rect(60, 540, 42, 35))
            if self.died == 3:
                if self.move_direction_rl == "right" and self.move_direction_du == "down":
                  self.endimage = self.images["water_elf"].subsurface(pygame.Rect(60, 60, 35, 35))
                elif self.move_direction_rl == "left" and self.move_direction_du == "down":
                  self.endimage = self.images["water_elf"].subsurface(pygame.Rect(60, 220, 42, 35))
                elif self.move_direction_rl == "right" and self.move_direction_du == "up":
                  self.endimage = self.images["water_elf"].subsurface(pygame.Rect(60, 380, 35, 35))
                elif self.move_direction_rl == "left" and self.move_direction_du == "up":
                  self.endimage = self.images["water_elf"].subsurface(pygame.Rect(60, 540, 42, 35))

    def key_hit(self):
        if self.rect.colliderect(key.rect):
            self.keyhit = 1
            key.rect.x = 10000

    def enemy_attack_hit(self):
      if self.human_died != 1 and self.dwarf_died != 1 and self.halfing_died != 1 and self.elf_died != 1:
       for trol in trols:
              if self.rect.colliderect(trol.attack_rect):
                    self.health -= 1.2
       for orc in orcs:
              if self.rect.colliderect(orc.attack_rect):
                    self.health -= 1.3
       for goblin in goblins:
              if self.rect.colliderect(goblin.attack_rect):
                    self.health -= 0.7
       for centaur in centaurs:
              if self.rect.colliderect(centaur.attack_rect):
                    self.health -= 0.9
       for trasgo in trasgos:
              if self.rect.colliderect(trasgo.attack_rect):
                    self.health -= 0.8
       for minotaur in minotaurs:
              if self.rect.colliderect(minotaur.attack_rect):
                    self.health -= 0.2

    def draw_health_bar(self):
      pygame.draw.rect(ekran,(0,0,0),(8,8,self.health_black,24))
      pygame.draw.rect(ekran,(255,0,0),(10,10,self.health_red,20))
      pygame.draw.rect(ekran,(0,255,0),(10,10,self.health,20))

    def body_transformation(self):
      if self.died == 1:
        if self.health <= 0:
          self.dwarf_died = 1
      if self.died == 2:
        if self.health <= 0:
          self.halfing_died = 1
      if self.died == 3:
        if self.health <= 0:
          self.elf_died = 1
      if self.human_died == 1:
        self.die()
      if self.dwarf_died == 1:
        self.die()
      if self.halfing_died == 1:
        self.die()
      if self.elf_died == 1:
        self.die()
      if self.health <= 0:
            self.human_died = 1
            self.died += 1
            self.health = 150
            self.health_increase = 1
      if self.health_increase == 1:
            if self.died == 1:
                  self.health, self.health_red, self.health_black, self.health_increase = 230, 230, 234, 0
            if self.died == 2:
                  self.health, self.health_red, self.health_black, self.health_increase = 130, 130, 134, 0
            if self.died == 3:
                  self.health, self.health_red, self.health_black, self.health_increase = 180, 180, 184, 0

    def draw(self):
        ekran.blit(self.endimage,self.rect)
    
    def game_over(self):
        if self.died == 4:
          if not hasattr(self, 'text_y3'):
              self.text_y3 = 90
          if not hasattr(self, 'text2_y3'):
              self.text2_y3 = 180
      
          pygame.draw.rect(ekran, (0, 0, 0), (0, 0, width, height))
          font = pygame.font.Font("pixel_font.otf", 50)
          font2 = pygame.font.Font("pixel_font.otf", 80)

          text = font2.render("Game Over", True, (255, 255, 255))
          text2 = font2.render("You used your last life...", True, (255, 255, 255))

          ekran.blit(text, (300, self.text_y3))
          ekran.blit(text2, (125, self.text2_y3))

    def draw_dark_surface(self):
      if self.darkening == True:
        self.dark_surface = pygame.Surface((width, height))
        self.dark_surface.set_alpha(self.darken_level)  
        self.dark_surface.fill((0,0,0))
        ekran.blit(self.dark_surface, (0, 0))

    def update(self):
        self.draw_dark_surface()
        self.end()
        self.draw()
        self.key_hit()
        if self.player_hit_goldheart == 0 and self.start_button == 1:
          self.draw_health_bar()
          self.move()
          self.enemy_attack_hit()
          self.body_transformation()
        self.game_over()
        self.goldheart_hit()

class Attack():
    def __init__(self,x,y,en,boy):  
        self.x = x
        self.y = y
        self.en = en
        self.boy = boy
        self.rect = pygame.Rect(self.x, self.y, self.en, self.boy)

    def draw(self):
        pygame.draw.rect(ekran,(0,0,0),self.rect)

class EnemyAttack():
    def __init__(self,x,y,en,boy):  
        self.x = x
        self.y = y
        self.en = en
        self.boy = boy
        self.rect = pygame.Rect(self.x, self.y, self.en, self.boy)

    def draw(self):
        pygame.draw.rect(ekran,(0,0,0),self.rect)

pygame.init()

width, height= 920, 700
ekran = pygame.display.set_mode((width,height))
pygame.display.set_caption("Golden heart of the dungeon")
clock = pygame.time.Clock()

map = Map(0,0)

player = Player(x=width//2,y=height//2,en=35,boy=35,speed=5)
attack = Attack(player.x,player.y,20,15)

goldheart = GoldHeart(4464,4536)
key = Key(4656,204)
door = Door(4272,4368)

trols = [Trol(1152,1536,40,40,2),Trol(624,1344,39,63,2),Trol(824,1644,39,63,2),Trol(224,1944,39,63,2),Trol(1424,900,39,63,2),Trol(480,2016,39,63,2),Trol(2160,1488,40,40,2),Trol(1824,2016,39,63,2),Trol(2112,2496,39,63,2),Trol(912,2496,39,63,2),Trol(288,2688,39,63,2),Trol(2832,2016,39,63,2)]
centaurs = [Centaur(3216,1728,39,63,5),Centaur(2880,2208,39,63,5),Centaur(4080,1728,39,63,5),Centaur(3792,2448,39,63,5)]
minotaurs = [Minotaur(1584,96,39,63,5),Minotaur(2160,480,39,63,5),Minotaur(3264,3120,39,63,5),Minotaur(3552,3552,39,63,5),  Minotaur(4128,3168,39,63,5),Minotaur(4368,3552,39,63,5)]
trasgos = [Trasgo(1584,96,39,63,5),Trasgo(2160,480,39,63,5),Trasgo(3264,3120,39,63,5),Trasgo(3552,3552,39,63,5),Trasgo(4128,3168,39,63,5),Trasgo(4368,3552,39,63,5),Trasgo(1824,4368,39,63,5),Trasgo(2256,4128,39,63,5),Trasgo(2646,4512,39,63,5),Trasgo(3024,4080,39,63,5),Trasgo(3600,4320,39,63,5),Trasgo(4032,4032,39,63,5)]
orcs = [Orc(2976,240,39,63,5),Orc(3216,816,39,63,5),Orc(2736,1056,39,63,5),Orc(3936,816,39,63,5),Orc(4386,1296,39,63,5)]
goblins = [Goblin(2208,3704,39,63,5),Goblin(480,3744,39,63,5),Goblin(1248,3648,39,63,5),Goblin(816,3984,39,63,5),Goblin(1014,4368,39,63,5),Goblin(1728,3120,39,63,5),Goblin(2544,3504,39,63,5),Goblin(2160,3648,39,63,5),Goblin(768,4032,39,63,5)]

enemies = []
enemies.append(trols)
enemies.append(centaurs)
enemies.append(minotaurs)
enemies.append(trasgos)
enemies.append(orcs)
enemies.append(goblins)

def create_walls(wall_map):
    walls = []
    cell_size = 48
    for y, row in enumerate(wall_map):
        for x, value in enumerate(row):
            if value == 1: 
                wall = Wall(x * cell_size, y * cell_size, cell_size, cell_size//2)
                walls.append(wall)
            if value == 2: 
                wall = Wall(x * cell_size, y * cell_size, cell_size//2, cell_size)
                walls.append(wall)
            if value == 3: 
                wall = Wall(x * cell_size+24, y * cell_size, cell_size//2, cell_size)
                walls.append(wall)
            if value == 4: 
                wall = Wall(x * cell_size+24, y * cell_size, cell_size//2, cell_size//2)
                walls.append(wall)
            if value == 5: 
                wall = Wall(x * cell_size, y * cell_size+20, cell_size, cell_size//2)
                walls.append(wall)
            if value == 6: 
                wall = Wall(x * cell_size+12, y * cell_size+12, cell_size//2, cell_size//2)
                walls.append(wall)
            if value == 7: 
                wall = Wall(x * cell_size+12, y * cell_size, cell_size//2, cell_size)
                walls.append(wall)
            if value == 8: 
                wall = Wall(x * cell_size, y * cell_size, cell_size, cell_size)
                walls.append(wall)
            if value == 9: 
                wall = Wall(x * cell_size+12, y * cell_size+24, cell_size//2, cell_size+24)
                walls.append(wall)
    return walls

def create_waters(wall_map):
    waters = []
    cell_size = 48
    for y, row in enumerate(wall_map):
        for x, value in enumerate(row):
            if value == "0": 
                water = Water(x * cell_size, y * cell_size, cell_size, cell_size)
                waters.append(water)
    return waters

walls = create_walls(wall_map)
waters = create_waters(wall_map)

def screen_shift():
  player.rect.x, player.rect.y = width//2, height//2
  if player.wallhit == 0:
    if player.direction == "right":
      map.rect.x -= player.speed
      for enemy in enemies:
        for enemy_type in enemy:
          enemy_type.rect.x -= player.speed
      goldheart.rect.x -= player.speed
      key.rect.x -= player.speed
      door.rect.x -= player.speed
      for wall in walls:
        wall.rect.x -= player.speed
      for water in waters:
        water.rect.x -= player.speed
    elif player.direction == "left":
      map.rect.x += player.speed
      for enemy in enemies:
        for enemy_type in enemy:
          enemy_type.rect.x += player.speed
      goldheart.rect.x += player.speed
      key.rect.x += player.speed
      door.rect.x += player.speed
      for wall in walls:
        wall.rect.x += player.speed
      for water in waters:
        water.rect.x += player.speed
    elif player.direction == "up":
      map.rect.y += player.speed
      for enemy in enemies:
        for enemy_type in enemy:
          enemy_type.rect.y += player.speed
      goldheart.rect.y += player.speed
      key.rect.y += player.speed
      door.rect.y += player.speed
      for wall in walls:
        wall.rect.y += player.speed
      for water in waters:
        water.rect.y += player.speed
    elif player.direction == "down":
      map.rect.y -= player.speed
      for enemy in enemies:
        for enemy_type in enemy:
          enemy_type.rect.y -= player.speed
      goldheart.rect.y -= player.speed
      key.rect.y -= player.speed
      door.rect.y -= player.speed
      for wall in walls:
        wall.rect.y -= player.speed
      for water in waters:
        water.rect.y -= player.speed
 
pygame.mixer.init()
pygame.mixer.music.load('music/game_music.mp3')
pygame.mixer.music.play(-1)

sound = pygame.mixer.Sound('music/sword_sound.mp3')

run = True
while run:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
        if event.type == pygame.MOUSEBUTTONDOWN:
            mouse_pos = pygame.mouse.get_pos()
            if player.button_rect.collidepoint(mouse_pos):
                player.start_button = 1

    ekran.fill((255,0,255))
    map.draw()
    for trol in trols:
      trol.update()
    for goblin in goblins:
      goblin.update()
    for centaur in centaurs:
      centaur.update()
    for trasgo in trasgos:
      trasgo.update()
    for orc in orcs:
      orc.update()
    goldheart.draw()
    key.draw()
    player.update()
    door.draw()
    if player.start_button == 0:
      player.start()
    screen_shift()
    pygame.display.flip()
    clock.tick(50)

pygame.quit()